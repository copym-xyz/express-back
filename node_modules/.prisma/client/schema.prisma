// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password_hash        String?
  first_name           String
  last_name            String
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  email_verified       Boolean               @default(false)
  profile_image        String?
  phone_number         String?
  roles                UserRole[]
  auth_providers       AuthProvider[]
  did_wallets          DIDWallet[]
  refresh_tokens       RefreshToken[]
  admin                Admin?
  issuer               Issuer?
  investor             Investor?
  wallet               Wallet?
  sumsubApplicants     SumsubApplicant[]
  webhookEvents        SumsubWebhook[]
  verificationAttempts VerificationAttempt[]
}

model UserRole {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role       String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model Admin {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  department String
  position   String
  last_login DateTime?
  user       User      @relation(fields: [user_id], references: [id])
}

model Issuer {
  id                          Int       @id @default(autoincrement())
  user_id                     Int       @unique
  company_name                String
  company_registration_number String
  jurisdiction                String
  verification_status         Boolean   @default(false)
  verification_date           DateTime?
  company_documents           Json?
  user                        User      @relation(fields: [user_id], references: [id])
  sumsub_applicant_id         String?
  sumsub_external_id          String?
  sumsub_correlation_id       String?
  sumsub_inspection_id        String?
  is_active                   Boolean   @default(true)
  is_kyb_completed            Boolean   @default(false)
  mobile_number               String?
  platform_client_id          String?
  registration_date           DateTime  @default(now())
}

model Investor {
  id                   Int       @id @default(autoincrement())
  user_id              Int       @unique
  investor_type        String
  accreditation_status String
  accreditation_date   DateTime?
  kyc_documents        Json?
  aml_documents        Json?
  kyc_verified         Boolean   @default(false)
  aml_verified         Boolean   @default(false)
  user                 User      @relation(fields: [user_id], references: [id])
}

model AuthProvider {
  id               Int      @id @default(autoincrement())
  user_id          Int
  provider_name    String
  provider_user_id String
  provider_data    Json?
  created_at       DateTime @default(now())
  last_used        DateTime @updatedAt
  user             User     @relation(fields: [user_id], references: [id])
}

model DIDWallet {
  id             Int      @id @default(autoincrement())
  user_id        Int
  wallet_address String
  did            String
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now())
  last_used      DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique
  expires_at  DateTime
  created_at  DateTime @default(now())
  device_info String?
  user        User     @relation(fields: [user_id], references: [id])
}

model Wallet {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  address      String   @unique
  type         String
  chain        String
  is_custodial Boolean  @default(true)
  admin_signer String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
}

// Enhanced Sumsub applicant data
model SumsubApplicant {
  id                   Int                   @id @default(autoincrement())
  applicantId          String                @unique // Sumsub's applicant identifier
  externalUserId       String? // Your system's user identifier
  userId               Int? // Reference to your user
  user                 User?                 @relation(fields: [userId], references: [id])
  levelName            String // Verification level name
  type                 String                @default("individual") // individual or company
  inspectionId         String? // Latest inspection ID
  reviewStatus         String // init, pending, completed, etc.
  reviewResult         String? // GREEN, RED for completed reviews
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  info                 Json? // Applicant personal information
  metadata             Json? // Additional metadata
  isLocked             Boolean               @default(false)
  requiredIdDocs       Json? // Required document types
  review               SumsubReview?
  documents            SumsubDocument[]
  webhookEvents        SumsubWebhook[]
  verificationAttempts VerificationAttempt[]

  @@index([applicantId])
  @@index([externalUserId])
  @@index([userId])
}

// Enhanced document tracking
model SumsubDocument {
  id                  Int             @id @default(autoincrement())
  applicantId         String // Reference to Sumsub applicant
  idDocType           String // ID_CARD, PASSPORT, etc.
  subType             String? // FRONT_SIDE, BACK_SIDE
  country             String? // Document issuing country
  status              String // pending, verified, rejected
  addedDate           DateTime        @default(now())
  fileId              String? // Sumsub's file identifier
  filename            String?
  fileSize            Int?
  mimeType            String?
  imageQuality        Json? // Quality check results
  verificationResults Json? // Verification results for this document
  applicant           SumsubApplicant @relation(fields: [applicantId], references: [applicantId])

  @@index([applicantId])
  @@index([idDocType])
}

// Detailed review information
model SumsubReview {
  id               Int             @id @default(autoincrement())
  applicantId      String          @unique // Reference to Sumsub applicant
  reviewId         String // Sumsub's review identifier
  reviewStatus     String // init, pending, completed
  reviewResult     String? // GREEN, RED
  rejectType       String? // FINAL, RETRY
  rejectLabels     Json? // Array of rejection reasons
  moderatorComment String? // Comments from reviewer
  clientComment    String? // Your comments
  reviewDate       DateTime?
  startDate        DateTime        @default(now())
  endDate          DateTime?
  applicant        SumsubApplicant @relation(fields: [applicantId], references: [applicantId])

  @@index([applicantId])
  @@index([reviewStatus])
}

// Enhanced webhook events tracking
model SumsubWebhook {
  id             Int             @id @default(autoincrement())
  applicantId    String // Sumsub applicant identifier
  inspectionId   String? // Inspection identifier
  type           String // Webhook event type
  status         String? // Current status
  reviewResult   String? // GREEN, RED, etc
  rejectType     String? // FINAL, RETRY
  rejectLabels   Json? // Array of rejection reasons
  reviewAnswer   String? // Final review decision
  createdAt      DateTime        @default(now())
  modifiedAt     DateTime        @updatedAt
  rawPayload     Json // Complete webhook payload
  verificationId String? // Verification reference
  externalUserId String? // Your system's user identifier
  levelName      String? // Verification level name
  sandboxMode    Boolean         @default(false)
  clientId       String? // Sumsub client identifier
  correlationId  String? // Event correlation ID
  reviewStatus   String? // Review process status
  applicantType  String? // individual or company
  userId         Int? // Reference to your user
  user           User?           @relation(fields: [userId], references: [id])
  applicant      SumsubApplicant @relation(fields: [applicantId], references: [applicantId])

  @@index([applicantId])
  @@index([externalUserId])
  @@index([type])
  @@index([createdAt])
}

// Enhanced verification attempts tracking
model VerificationAttempt {
  id            Int             @id @default(autoincrement())
  userId        Int
  applicantId   String
  status        String // current verification status
  attemptNumber Int             @default(1)
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  result        String? // Final result
  failureReason String? // Failure reason if any
  documentType  String? // Document type submitted
  levelName     String // Verification level
  metadata      Json? // Additional attempt metadata
  user          User            @relation(fields: [userId], references: [id])
  applicant     SumsubApplicant @relation(fields: [applicantId], references: [applicantId])

  @@index([userId])
  @@index([applicantId])
}

// Webhook configuration and secrets
model WebhookConfig {
  id           Int       @id @default(autoincrement())
  name         String    @unique // e.g., "copym"
  targetUrl    String // Webhook destination URL
  secretKey    String // Secret key for signature verification
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  modifiedAt   DateTime  @updatedAt
  lastPingAt   DateTime?
  failureCount Int       @default(0)
  digestAlg    String    @default("HMAC_SHA256_HEX") // Signature algorithm

  @@index([name])
}
