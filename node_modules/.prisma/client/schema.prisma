// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password_hash  String?
  first_name     String
  last_name      String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  email_verified Boolean        @default(false)
  profile_image  String?
  phone_number   String?
  roles          UserRole[]
  auth_providers AuthProvider[]
  did_wallets    DIDWallet[]
  refresh_tokens RefreshToken[]
  admin          Admin?
  issuer         Issuer?
  investor       Investor?
  wallet         Wallet?
  kyc            KYC?
}

model UserRole {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role       String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model Admin {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique
  department String
  position   String
  last_login DateTime?
  user       User      @relation(fields: [user_id], references: [id])
}

model Issuer {
  id                          Int       @id @default(autoincrement())
  user_id                     Int       @unique
  company_name                String
  company_registration_number String
  jurisdiction                String
  verification_status         Boolean   @default(false)
  verification_date           DateTime?
  company_documents           Json?
  user                        User      @relation(fields: [user_id], references: [id])
}

model Investor {
  id                   Int       @id @default(autoincrement())
  user_id              Int       @unique
  investor_type        String
  accreditation_status String
  accreditation_date   DateTime?
  kyc_documents        Json?
  aml_documents        Json?
  kyc_verified         Boolean   @default(false)
  aml_verified         Boolean   @default(false)
  user                 User      @relation(fields: [user_id], references: [id])
}

model AuthProvider {
  id               Int      @id @default(autoincrement())
  user_id          Int
  provider_name    String
  provider_user_id String
  provider_data    Json?
  created_at       DateTime @default(now())
  last_used        DateTime @updatedAt
  user             User     @relation(fields: [user_id], references: [id])
}

model DIDWallet {
  id             Int      @id @default(autoincrement())
  user_id        Int
  wallet_address String
  did            String
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now())
  last_used      DateTime @updatedAt
  user           User     @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique
  expires_at  DateTime
  created_at  DateTime @default(now())
  device_info String?
  user        User     @relation(fields: [user_id], references: [id])
}

model Wallet {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  address      String   @unique
  type         String
  chain        String
  is_custodial Boolean  @default(true)
  admin_signer String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
}

model KYC {
  id                     Int       @id @default(autoincrement())
  user_id                Int       @unique
  onfido_applicant_id    String?   @unique
  verification_status    String    @default("PENDING") // PENDING, APPROVED, REJECTED, CONSIDER
  document_ids           Json? // Array of document IDs uploaded to Onfido
  check_id               String? // Latest Onfido check ID
  check_status           String? // Status from Onfido: "in_progress", "awaiting_applicant", "complete", "withdrawn"
  check_result           String? // Result from Onfido: "clear", "consider"
  check_sub_result       String? // Sub-result details
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  last_checked           DateTime?
  manually_approved      Boolean   @default(false)
  manually_approved_at   DateTime?
  manually_approved_by   Int? // Admin user ID
  rejection_reason       String?
  resubmission_requested Boolean   @default(false)
  region                 String? // User's region (US, EU, CA)
  user                   User      @relation(fields: [user_id], references: [id])
}
