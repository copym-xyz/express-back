// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password_hash  String?
  first_name     String
  last_name      String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  email_verified Boolean        @default(false)
  profile_image  String?
  phone_number   String?
  roles          UserRole[]
  auth_providers AuthProvider[]
  did_wallets    DIDWallet[]
  refresh_tokens RefreshToken[]
  admin          Admin?
  issuer         Issuer?
  investor       Investor?
  wallet         Wallet?
  
  // Add relation to KYC verifications
  kyc_verifications kycVerification[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user_id   Int
  role      String
  created_at DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
}

model Admin {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  department      String
  position        String
  last_login      DateTime?
  user            User     @relation(fields: [user_id], references: [id])
}

model Issuer {
  id                      Int      @id @default(autoincrement())
  user_id                 Int      @unique
  company_name            String
  company_registration_number String
  jurisdiction            String
  verification_status     Boolean  @default(false)
  verification_date       DateTime?
  company_documents       Json?
  user                    User     @relation(fields: [user_id], references: [id])
  sumsub_applicant_id     String?
  sumsub_external_id      String?
  sumsub_correlation_id   String?
  sumsub_inspection_id    String?
  is_active               Boolean  @default(true)
  is_kyb_completed        Boolean  @default(false)
  mobile_number           String?
  platform_client_id      String?
  registration_date       DateTime @default(now())
}

model Investor {
  id                  Int      @id @default(autoincrement())
  user_id             Int      @unique
  investor_type       String
  accreditation_status String
  accreditation_date  DateTime?
  kyc_documents       Json?
  aml_documents       Json?
  kyc_verified        Boolean  @default(false)
  aml_verified        Boolean  @default(false)
  user                User     @relation(fields: [user_id], references: [id])
}

model AuthProvider {
  id              Int      @id @default(autoincrement())
  user_id         Int
  provider_name   String
  provider_user_id String
  provider_data   Json?
  created_at      DateTime @default(now())
  last_used       DateTime @updatedAt
  user            User     @relation(fields: [user_id], references: [id])
}

model DIDWallet {
  id            Int      @id @default(autoincrement())
  user_id       Int
  wallet_address String
  did           String
  is_primary    Boolean  @default(false)
  created_at    DateTime @default(now())
  last_used     DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique
  expires_at  DateTime
  created_at  DateTime @default(now())
  device_info String?
  user        User     @relation(fields: [user_id], references: [id])
}

model Wallet {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  address      String   @unique
  type         String
  chain        String
  is_custodial Boolean  @default(true)
  admin_signer String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
}

model kycVerification {
  id               Int       @id @default(autoincrement())
  applicantId      String
  externalUserId   String
  inspectionId     String
  correlationId    String?
  type             String
  reviewStatus     String
  reviewResult     String?
  createdAt        DateTime  @default(now())
  modifiedAt       DateTime  @updatedAt
  rawData          String    @db.Text
  userId           Int?
  user             User?     @relation(fields: [userId], references: [id])
  
  // New fields for webhook handling
  signatureValid   Boolean   @default(false)
  webhookType      String?
  eventTimestamp   DateTime?
  processingStatus String?   @default("processed")
  retryCount       Int       @default(0)
  errorMessage     String?

  @@index([externalUserId])
  @@index([webhookType])
  @@index([applicantId])
  @@map("kyc_verifications")
} 