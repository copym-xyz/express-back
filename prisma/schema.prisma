generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique(map: "Admin_user_id_key")
  department String
  position   String
  last_login DateTime?
  user       user      @relation(fields: [user_id], references: [id], map: "Admin_user_id_fkey")
}

model authprovider {
  id               Int      @id @default(autoincrement())
  user_id          Int
  provider_name    String
  provider_user_id String
  provider_data    Json?
  created_at       DateTime @default(now())
  last_used        DateTime
  user             user     @relation(fields: [user_id], references: [id], map: "AuthProvider_user_id_fkey")

  @@index([user_id], map: "AuthProvider_user_id_fkey")
}

model didwallet {
  id             Int      @id @default(autoincrement())
  user_id        Int
  wallet_address String
  did            String
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now())
  last_used      DateTime
  user           user     @relation(fields: [user_id], references: [id], map: "DIDWallet_user_id_fkey")

  @@index([user_id], map: "DIDWallet_user_id_fkey")
}

model investor {
  id                   Int       @id @default(autoincrement())
  user_id              Int       @unique(map: "Investor_user_id_key")
  investor_type        String
  accreditation_status String
  accreditation_date   DateTime?
  kyc_documents        Json?
  aml_documents        Json?
  kyc_verified         Boolean   @default(false)
  aml_verified         Boolean   @default(false)
  user                 user      @relation(fields: [user_id], references: [id], map: "Investor_user_id_fkey")
}

model issuer {
  id                          Int        @id @default(autoincrement())
  user_id                     Int        @unique(map: "Issuer_user_id_key")
  company_name                String
  company_registration_number String
  jurisdiction                String
  verification_status         Boolean    @default(false)
  verification_date           DateTime?
  company_documents           Json?
  created_at                  DateTime   @default(now())
  updated_at                  DateTime   @default(now())
  wallet_address              String?
  wallet_created_at           DateTime?
  user                        user       @relation(fields: [user_id], references: [id], map: "Issuer_user_id_fkey")
  offering                    offering[]
}

model offering {
  id                 Int      @id @default(autoincrement())
  issuer_id          Int
  name               String
  description        String   @db.Text
  target_amount      Decimal  @db.Decimal(15, 2)
  minimum_investment Decimal  @db.Decimal(15, 2)
  start_date         DateTime
  end_date           DateTime
  status             String   @default("DRAFT")
  created_at         DateTime @default(now())
  updated_at         DateTime
  documents          Json?
  issuer             issuer   @relation(fields: [issuer_id], references: [id], map: "Offering_issuer_id_fkey")

  @@index([issuer_id], map: "Offering_issuer_id_fkey")
}

model refreshtoken {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique(map: "RefreshToken_token_key")
  expires_at  DateTime
  created_at  DateTime @default(now())
  device_info String?
  user        user     @relation(fields: [user_id], references: [id], map: "RefreshToken_user_id_fkey")

  @@index([user_id], map: "RefreshToken_user_id_fkey")
}

model user {
  id             Int            @id @default(autoincrement())
  email          String         @unique(map: "User_email_key")
  password_hash  String?
  first_name     String
  last_name      String
  created_at     DateTime       @default(now())
  updated_at     DateTime
  email_verified Boolean        @default(false)
  profile_image  String?
  phone_number   String?
  admin          admin?
  authprovider   authprovider[]
  didwallet      didwallet[]
  investor       investor?
  issuer         issuer?
  refreshtoken   refreshtoken[]
  userrole       userrole[]
}

model userrole {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role       String
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id], map: "UserRole_user_id_fkey")

  @@index([user_id], map: "UserRole_user_id_fkey")
}
