generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model kycVerification {
  id                Int      @id @default(autoincrement())
  type              String
  applicant_id      String
  correlation_id    String?
  created_at        DateTime @default(now())
  error_message     String?  @db.Text
  event_timestamp   DateTime
  external_user_id  String?
  inspection_id     String?
  processing_status String?
  raw_data          String   @db.Text
  review_result     String?
  review_status     String
  signature_valid   Boolean
  updated_at        DateTime
  user_id           Int?
  webhook_type      String
  users             users?   @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "kyc_verifications_user_id_fkey")
  @@map("kyc_verifications")
}

model KycDocument {
  id                   Int                   @id @default(autoincrement())
  applicant_id         String?
  country              String?
  created_at           DateTime              @default(now())
  document_id          String?
  document_sub_type    String?
  document_type        String
  field_name           String?
  file_name            String
  file_path            String
  file_type            String
  file_url             String?
  id_doc_type          String?
  issued_date          DateTime?
  number               String?
  page_type            String?
  record_id            Int?
  status               String                @default("active")
  updated_at           DateTime
  user_id              Int?
  valid_until          DateTime?
  kyc_complete_records kyc_complete_records? @relation(fields: [record_id], references: [id], onDelete: Cascade)
  users                users?                @relation(fields: [user_id], references: [id])

  @@index([document_type])
  @@index([record_id])
  @@index([status])
  @@index([user_id])
  @@map("kyc_documents")
}

model admin {
  id         Int       @id @default(autoincrement())
  user_id    Int       @unique(map: "Admin_user_id_key")
  department String
  position   String
  last_login DateTime?
  users      users     @relation(fields: [user_id], references: [id], map: "Admin_user_id_fkey")
}

model authprovider {
  id               Int      @id @default(autoincrement())
  user_id          Int
  provider_name    String
  provider_user_id String
  provider_data    Json?
  created_at       DateTime @default(now())
  last_used        DateTime
  users            users    @relation(fields: [user_id], references: [id], map: "AuthProvider_user_id_fkey")

  @@index([user_id], map: "AuthProvider_user_id_fkey")
}

model didwallet {
  id             Int      @id @default(autoincrement())
  user_id        Int
  wallet_address String
  did            String
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now())
  last_used      DateTime
  users          users    @relation(fields: [user_id], references: [id], map: "DIDWallet_user_id_fkey")

  @@index([user_id], map: "DIDWallet_user_id_fkey")
}

model investor {
  id                   Int       @id @default(autoincrement())
  user_id              Int       @unique(map: "Investor_user_id_key")
  investor_type        String
  accreditation_status String
  accreditation_date   DateTime?
  kyc_documents        Json?
  aml_documents        Json?
  kyc_verified         Boolean   @default(false)
  aml_verified         Boolean   @default(false)
  users                users     @relation(fields: [user_id], references: [id], map: "Investor_user_id_fkey")
}

model issuer {
  id                          String    @id @default(uuid())
  user_id                     Int       @unique
  company_name                String
  company_registration_number String
  jurisdiction                String
  verification_status         Boolean   @default(false)
  verification_date           DateTime?
  company_documents           Json?
  is_active                   Boolean   @default(true)
  is_kyb_completed            Boolean   @default(false)
  mobile_number               String?
  platform_client_id          String?
  registration_date           DateTime  @default(now())
  sumsub_applicant_id         String?
  sumsub_correlation_id       String?
  sumsub_external_id          String?
  sumsub_inspection_id        String?
  did                         String?
  did_created_at              DateTime?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt
  users                       users     @relation(fields: [user_id], references: [id])
  wallet                      wallet?
}

model kyc_address_info {
  id                  Int            @id @default(autoincrement())
  applicant_id        String
  address_type        String
  is_primary          Boolean        @default(false)
  street              String?
  street_line2        String?
  city                String?
  state               String?
  postal_code         String?
  country             String?
  is_verified         Boolean        @default(false)
  verification_method String?
  created_at          DateTime       @default(now())
  updated_at          DateTime
  kyc_applicants      kyc_applicants @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade)

  @@index([applicant_id], map: "kyc_address_info_applicant_id_fkey")
}

model kyc_addresses {
  id                   Int                  @id @default(autoincrement())
  record_id            Int
  address_type         String               @default("RESIDENTIAL")
  is_primary           Boolean              @default(false)
  street               String?
  street_line_2        String?
  city                 String?
  state                String?
  postal_code          String?
  country              String?
  is_verified          Boolean              @default(false)
  updated_at           DateTime
  created_at           DateTime             @default(now())
  kyc_complete_records kyc_complete_records @relation(fields: [record_id], references: [id], onDelete: Cascade)

  @@index([record_id])
}

model kyc_applicants {
  id                       Int                        @id @default(autoincrement())
  applicant_id             String                     @unique
  user_id                  Int?
  external_user_id         String?
  inspection_id            String?
  correlation_id           String?
  status                   String                     @default("pending")
  result                   String?
  id_doc_status            String?
  created_at               DateTime                   @default(now())
  updated_at               DateTime
  sandbox_mode             Boolean                    @default(false)
  personal_info_id         Int?                       @unique
  kyc_address_info         kyc_address_info[]
  kyc_personal_info        kyc_personal_info?         @relation(fields: [personal_info_id], references: [id])
  users                    users?                     @relation(fields: [user_id], references: [id])
  kyc_audit_log            kyc_audit_log[]
  kyc_raw_data             kyc_raw_data[]
  kyc_verification_history kyc_verification_history[]

  @@index([user_id], map: "kyc_applicants_user_id_fkey")
}

model kyc_audit_log {
  id             Int            @id @default(autoincrement())
  applicant_id   String
  action         String
  performed_by   String?
  details        String?        @db.Text
  timestamp      DateTime       @default(now())
  kyc_applicants kyc_applicants @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade)

  @@index([applicant_id], map: "kyc_audit_log_applicant_id_fkey")
}

model kyc_complete_records {
  id                      Int                       @id @default(autoincrement())
  applicant_id            String                    @unique
  user_id                 Int?
  status                  String                    @default("pending")
  result                  String?
  complete_data           Json?
  collected_at            DateTime                  @default(now())
  updated_at              DateTime
  created_at              DateTime                  @default(now())
  kyc_addresses           kyc_addresses[]
  users                   users?                    @relation(fields: [user_id], references: [id])
  kyc_documents           KycDocument[]
  kyc_personal_info       kyc_personal_info?
  kyc_verification_events kyc_verification_events[]

  @@index([result])
  @@index([status])
  @@index([user_id])
}

model kyc_personal_info {
  id                        Int                   @id @default(autoincrement())
  applicant_id              String?
  record_id                 Int?                  @unique
  first_name                String?
  last_name                 String?
  middle_name               String?
  full_name                 String?
  legal_name                String?
  gender                    String?
  date_of_birth             DateTime?
  place_of_birth            String?
  country_of_birth          String?
  state_of_birth            String?
  nationality               String?
  phone                     String?
  email                     String?
  country                   String?
  tax_residence_country     String?
  tax_identification_number String?
  id_number                 String?
  created_at                DateTime              @default(now())
  updated_at                DateTime
  kyc_applicants            kyc_applicants?
  kyc_complete_records      kyc_complete_records? @relation(fields: [record_id], references: [id], onDelete: Cascade)
}

model kyc_raw_data {
  id             Int            @id @default(autoincrement())
  applicant_id   String
  data_type      String
  source         String
  raw_data       String         @db.LongText
  created_at     DateTime       @default(now())
  kyc_applicants kyc_applicants @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade)

  @@index([applicant_id], map: "kyc_raw_data_applicant_id_fkey")
}

model kyc_verification_events {
  id                   Int                  @id @default(autoincrement())
  record_id            Int
  type                 String               @default("webhook")
  review_status        String?
  review_result        String?
  inspection_id        String?
  event_data           Json?
  event_timestamp      DateTime
  created_at           DateTime             @default(now())
  kyc_complete_records kyc_complete_records @relation(fields: [record_id], references: [id], onDelete: Cascade)

  @@index([record_id])
  @@index([review_result])
  @@index([review_status])
  @@index([type])
}

model kyc_verification_history {
  id             Int            @id @default(autoincrement())
  applicant_id   String
  type           String
  review_status  String
  review_result  String?
  review_answer  String?
  reject_type    String?
  reject_labels  String?
  timestamp      DateTime
  created_at     DateTime       @default(now())
  kyc_applicants kyc_applicants @relation(fields: [applicant_id], references: [applicant_id], onDelete: Cascade)

  @@index([applicant_id], map: "kyc_verification_history_applicant_id_fkey")
}

model refreshtoken {
  id          Int      @id @default(autoincrement())
  user_id     Int
  token       String   @unique(map: "RefreshToken_token_key")
  expires_at  DateTime
  created_at  DateTime @default(now())
  device_info String?
  users       users    @relation(fields: [user_id], references: [id], map: "RefreshToken_user_id_fkey")

  @@index([user_id], map: "RefreshToken_user_id_fkey")
}

model userrole {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role       String
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], map: "UserRole_user_id_fkey")

  @@index([user_id], map: "UserRole_user_id_fkey")
}

model users {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  password             String
  first_name           String
  last_name            String
  created_at           DateTime               @default(now())
  updated_at           DateTime
  applicant_id         String?
  is_verified          Boolean                @default(false)
  verification_result  String?
  admin                admin?
  authprovider         authprovider[]
  didwallet            didwallet[]
  investor             investor?
  issuer               issuer?
  kyc_applicants       kyc_applicants[]
  kyc_complete_records kyc_complete_records[]
  kyc_documents        KycDocument[]
  kyc_verifications    kycVerification[]
  refreshtoken         refreshtoken[]
  userrole             userrole[]
  wallet               wallet?
}

model wallet {
  id          String   @id @default(uuid())
  user_id     Int      @unique
  issuer_id   String?  @unique
  address     String
  chain       String   @default("polygon")
  type        String   @default("evm-mpc-wallet")
  provider    String   @default("crossmint")
  did         String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  credentials Json?    @default(dbgenerated("(_utf8mb4\\'{}\\')"))
  issuer      issuer?  @relation(fields: [issuer_id], references: [id])
  users       users    @relation(fields: [user_id], references: [id])
}

model webhookLog {
  id           Int       @id @default(autoincrement())
  type         String
  payload      Json
  signature    String?
  status       String    @default("received")
  provider     String    @default("sumsub")
  processed    Boolean   @default(false)
  processed_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("webhook_logs")
}
